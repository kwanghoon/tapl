
OCaml Self Exercises


===================================================================================
Name:
Student ID:
===================================================================================

Study the following topics in the guided tour
 - https://dev.realworldocaml.org/guided-tour.html


 1) int float string char

 2) let binding

 3) functions and type inference

 4) inferring generic types

 5) tuples, lists, options, and pattern matching

 6) recursive (list) functions

   - let rec

 7) records and variants

 8) arrays

 9) refs

You may refer to

 - Chapter 26 The standard library
     https://caml.inria.fr/pub/docs/manual-ocaml/index.html

===================================================================================

Exercises

(List-1) last : 'a list -> 'a option

  - last [1;2;3] ==> Some 3
  - last ['1';'2';'3'] ==> Some '3'
  - last [] ==> None

  (Do not use the list library.)

[SOLUTION]





(List-2) length : 'a list -> int

  - length [1;2;3] ==> 3
  - length [] ==> 0

  (Do not use the list library.)

[SOLUTION]





(List-3) is_palindrome : 'a list -> bool

  - is_palindrome ['x'; 'a'; 'm'; 'a'; 'x'] ==> true
  - is_palindrome ['c'; 'h'; 'o'; 'i'] ==> false
  - is_palindrome [] ==> true

[SOLUTION]




(List-4) flatten : 'a node list -> 'a list

    type 'a node =
    | One of 'a
    | Many of 'a node list

  - flatten [One 'a'; Many [One 'b'; Many [One 'c'; One 'd']; One 'e']]
    ==> ['a'; 'b'; 'c'; 'd'; 'e']

[SOLUTION]




(List-5) run_length : 'a list -> (int * 'a) list

  - run_length ['a'; 'a'; 'a'; 'b'; 'b'; 'c'; 'c'; 'c'; 'c']
    ==> [(3, 'a'); (2, 'b'); (4, 'c')]

    i.e., three 'a', two 'b', and four 'c' !!!

[SOLUTION]




===================================================================================

(Num-1) newton_square 2. ==> 1.414...

   - Python code:

   def sqrt(n):

    x = n

    y = (x+1)/2

    while y < x:

        x = y

        y = (x+n/x)/2

    return x

   - newton_square : float -> float

   - write a recursive function in OCaml!

[SOLUTION]





(Num-2) all_primes : int -> int -> int list

  - all_primes 2 20 ==> [2;3;5;7;11;13;17;19]

[SOLUTION]




===================================================================================

(Logic-1) evaluate : (string * bool) list -> bool_expr -> bool

  - type bool_expr =
      |  Var of string
      |  Not of bool_expr
      |  And of bool_expr * bool_expr
      |  Or  of bool_expr * bool_expr

  - evaluate
      [("a",true); ("b",false)]
      (And (Or (Var "a", Var "b"), And (Var "a", Var "b")))
    ==> false

[SOLUTION]





===================================================================================

(BinTree-1) max : 'a binary_tree -> 'a
  - type 'a binary_tree =
      | Empty
      | Node of 'a * 'a binary_tree * 'a binary_tree


  - Node 'a'
     (Node 'b' (Node 'd' Empty Empty) (Node 'e' Empty Empty))
     (Node 'c' (Node 'c' Empty (Node 'f' (Node 'g' Empty Empty) Empty)))

  - max ( ... ) ==> 'g'

[SOLUTION]





(BinTree-2) sum : int binary_tree -> int

  - sum (Node 1 (Node 2 Empty Empty) (Node 3 Empty (Node 4 Empty Empty)))
    ==> 10

[SOLUTION]





(BinTree-3) tostr : string binary_tree -> string

  - tostr Empty ==> ""
  - tostr (Node "a" Empty Empty) ==> "a"
  - tostr (Node "a" Empty (Node b Empty Empty)) ==> "a(,b)"
  - tostr (Node "a" (Node "b" Empty Empty) (Node "c" Empty (Node "d" Empty Empty)))
    ==> "a(b,c(,d))"

[SOLUTION]





===================================================================================


[Submission guideline]

 - Submit this text file including your solutions for the exercises.

 - Do not change the form. You are only allowed to add as many lines
   as your solution needs.

 - The file name should be in the form of

     Ocaml-Exercise-[Student ID]_[Name].txt

===================================================================================
